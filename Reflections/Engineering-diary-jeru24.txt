03-09
Grupp skapad, pratade om uppgiften i sig och skapade en privat gruppchat där vi kan nå 
varandra och dela länkar till tutorials & få kontakt med varandra på ett smidigt sätt.

04-09
Vi träffadesa och installerade de program som vi kan tänkas behöva, Docker, Git, IDEs vi
bestämde också oss för vad vi skulle använda för teknologier ie Docker istället för Podman.
Vi bestämde oss också för att använda oss av en relationsdatabas däremot måste vi i framtiden
bestämma vilken vi ska välja MySQL/PostreSQL... Man känner sig ganska vilse i uppgiften
just nu men jag tror att det blir bättre när man väl får ner en plan på hur vi ska genomföra
den.

05-09
Laboration där jag började gräva ner mig i det oändliga hålet av möjligheter med Git. Använder
mig av terminalen och testar några grundläggande kommandon. Har tidigare endast använd mig av
gränssnitt såsom GitHub Desktop och har insett att det finns många saker Git kan göra som du 
inte kan använda själv med ett sådant gränssnitt. Tittade senare på dagen på video-tutorials 
på Git vilket verkade som både repetition men hjälpde mig få in lite nytt i huvudet också.
Jag tänker mig att från början behöver jag bara få ner det grundläggande och att det tillåter
mig att i framtiden lättare utilisera lite mer avancerade koncept som Git har att erbjuda.

10-09
Gruppen möttes efter föreläsningen och vi skapade ett dokument där vi gör upp en plan, samlar
kärndelar från uppgiftsbeskrivningen och förklarar hur vi tänker gå tillväga. Vi började även
att ta våran egen varutyp och fylla på med information. Det vi i framtiden behöver göra är att
analysera uppgiften och bryta ner den, detta gör det mycket lättare att förstå hur saker ska fungera
och interagera då det är svårt att titta på en helhet och se allt det. Tillslut bestämde vi oss också
att använda oss av PostegreSQL, jag rekommenderade tidigare att vi bör använda en relationsdatabas
på grund av dess robusthet och att det är i min åsikt bäst att lära sig på grund av strukturen och
dess presteringsförmåga. Eftersom jag tidigare jobbat med databaser föreslog jag också PostgreSQL
på grund av att den har en enorm community men även ligger framför MySQL i vissa delar som att
Postgres också kan köra NoSQL vilket jag tror är bättre för de som lär sig första gången då de
senare efter använt Postgres för relationsdatabaser också lättare kan förstå och testa NoSQL där.
Det sista som gjordes idag var att komma överens om hur vi ska versionshantera, vi kommer att köra
på Git flow med en main branch och en development branch, sedan baseras Feature branches på development
och development kan forkas till en ny release branch som sedan mergas till main. Full förklaring här:
https://www.atlassian.com/git/tutorials/comparing-workflows/gitflow-workflow
Det har varit lite tjorv i början när alla lär sig GitHub och Git men nu har vi alla pratat ihop oss
och alla branches kommer användas enligt Git flow principerna i framtiden. Att få ordning och reda
på detta tror jag kommer betalas tillbaka 100 gånger då vi verkligen lär oss hur man vill gå tillväga
istället för att bara slänga in allt i main och ha noll koll när man väl vill titta på vad som gjorts.

17-09
Today we had a lecture with some more details on how the project could be set up with examples shown using Express and Flask. Our 
group later met and discussed. We decided to go with Flask as we are currently also in a python course, this prevents some newer 
programmers in the group to be exposed to the world of javascript and can continue to focus on the fundamentals with the a bit more 
familiar python syntax. I have since last time started designing the database structure and the database will be my main 
responsibility even though ill dip my toes in each part as im familiar with apis and web development aswell. Right now i have 
realised the database has some flaws when it comes to different parts of the burger ex bread topping and sauce, which are all under 
topping. This will in the future prevent grouping of "bread" "sauces" .. when the user wants to customize the burger. Ill look into 
this issue and try to improve the database structure in general to be optimized. Its done in postgres and im using drawsql to plan 
the database structure. Today we have also finished all the different items like menues and what the burgers contain in terms of 
toppings / what menues contain in terms of sides, drinks etc. Now i have all the data that should be pushed into the database so i 
can do that when i have more of a prototype. 

-

Somewhere between the last and the commit after this one....

We got together in a group room and got everyone in the loop of what our thoughts were and what we were going to do.
I also presented the database, how the tables work and how it can be used. I drew a database schema that further
shows the relation between tables even though the many to one etc lines are not correct it gives a rough idea of what 
id in this table is the same as that id in another table. An .sql file was also exported and put into the git repo,
i also showed the group how it can be imported into pgadmin so everyone can play around with queries and such.

26-09
Today we had a laboration on Docker. I have learned the basic pillars of Docker and watched some other tutorials to better understand fundamentals. 
I feel like ive grasped the functionality of a Dockerfile, image, container and volumes. Ive also learned some basic docker commands and how you can 
build a docker file with remapping ports etc. I understand how the functionality of docker is wanted today and i also feel like docker is kind of like git. 
The basics are easy but the possibilities are endless, especially when you introduce things like Kubernetes. Ill continue to learn and try to make it work by myself as 
learning by doing seems like a good choice with Docker.


02-10
Today we dcokerized the databased. Seeing as it was already finished we thought it would be a good test subject. It was not as easy as we first thought.
Eventually we had a working dockerfile and i also added an instructions file that contains the commands to build the image and the container. This will
in the future go into a compose file so its even easier. At first i had some issues importing the database, but after reading the log file of the container
it was quite clear what the issue was so a quick google solved it. To verify it actually worked i also tried connecting to the db in the container using psql
in the terminal. After verifiying all tables were there we were good to go. Everyone also tried installing the image and run the container and to no suprise 
docker works as it should for everyone  :) The next step would be for us to connect to the database! I have done this with both js and php in the past so i doubt we 
will have any issues doing it with python, but who knows!

04-10
Today we managed to connect to the database with python psycopg2, i made an example site that fetches all toppings from the db and builds up some html thats
in turn passed into a html template so we will still have great utilization of the template feature. I also realize now how nice it is to have a drawn database
schema because all the column names and table names are listed so you can easily write SQL queries without having to open pgadmin or such. The container port
is also remapped so 5432 in the container is 5433 outside since 5432 is the pg service port and i dont want the db to not work just because someone is running
a postgres service on their pc, then its just better to use a free port instead and it works great as long as you specify the port when connecting to the db

07-10
Today we made the db fetch the correct items when looking at what to order, ex only picking chicken items or 
drinks etc. Also added the skeleton for a cart system, only the html css, functionality is the next step there.
We made a new endpoint info/product/<product_id> That can be used to search up the info on a given product, a similair one 
info/menu/<menu_id> has been laid out but hasnt been made functional yet. Next step is to get some unit tests going, get a cart 
system and a way to modify orders. I have some worries with how its going to work with the cart since products and menus are stored 
differently in different tables but its easy to think something is a problem but when you start trying to implement it turns out it 
wasnt that bad. Menus just contain products in the end so it is definitely doable. The testing is taking shape, its the first time 
we have all done any kind of unit testing, but we have brain stormed a bit on what should be tested, ex the routes, the db 
connection etc. Overall a productive day, I've also noticed how similiar it is to build a basic api with Flask contra node & 
express, just slightly different syntax. Flask has html templates but taking dynamic data into templates are done 
kind of roughly in my opinion and in turn promotes building more html in python which can get messy fast, thats where react shines 
for me with .jsx making javascript and html work together better than i feel like it does with Flask. But thats to be expected 
since Python web dev isnt exactly the standard, i also think php has better integration with html but php is a different beast 
and works very close with html. Its interesting reflecting over the different technologies and what they are strong contra weak at. 
With python web dev you get the benefits of python but javascript / typescript still has a smoother overall experience in my humble 
opinion, the quirks with js can be painful but dont appear too often. You could do a Flask API & backend if youd like with a REACT 
frontend but Node just keeps getting better, i would still prefer to only use flask for backend though if i had to use it. Maybe
my opinion changes after this project but i doubt it.


09-10
We have made progress on the assignment, testing has been worked on and also a cart system. We made the cart system with a session variable that contains a dictionary and it worked exactly like 
when i did similiar things with PHP. It took a while to build it out because of there being so many routes for adding products, adding toppings, removing etc. But
now we only need to build a URL that is sent to kitchenview, we tested with a dummy url and the call gets registered by kitchen view so tomorrow we will all sit down
and try to figure out how we want to build the link to send over all info to kitchenview. At the moment all cart logic is in app.py, it can be moved into a separate file but theres
some struggles with that because the session variable cant be accessed so we would have to send over the cart back and forth alot, which is doable but not a priority for us right now.
The whole cart system also got written half way through because the first time there were some oversights leading to that approach not working as we wanted.


10-10
Today we have accomplished alot, the post request to kitchenview with the finished order now works and gets handled and printed
by kitchenview, theres now a receipt that prints on burgerorderer website when you place your order, i made it so it fetches
data from the session cart and added an option so u can go back to start a new order, that in turns clears your cart of course. 
We now have most elements working but we need to dockerize it which is the next step, we ran into a problem where burgerorderer 
cant connect to db but we realized its because we are using localhost and those are individual for the containers, to beat this
issue we need to set up a docker network and we will start doing that by building up our docker compose, it feels like we 
are on track to finish the project by the deadline, now we only need to dockerize everything together, clean up code, add 
docstrings and write the summary :)

15-10
We are now on the final stretch, since the last diary commit we have written alot on the summarization, we have made a working 
compose and added doc-strings + cleaned up code. The last thing we are focusing on is to write the READMEs and then we will all 
sit down to just go through the entire project and reflect on it. But everything finally works in docker! The tests run by
launching its own container which also separates the tests from the project files which is good. Currently we test the database
tables with some normal hardcoded expections and using assert to make sure we get what we expect. When the project launches
the test container launches which runs all the tests and then say how many tests passed and when running it goes like 

TESTING XXX
PASSED

TESTING YYY
FAILED

We made sure to make the test container dependant on menustore because if the db isnt running the tests will never pass
and the test container is completely reusable so if you launch it again it runs the tests and then exits.

16-10
---------------------------DEBUG SESSION------------------------------------

The functionality im going to test is to order a customized hamburger!

To start off im starting kitchenview in the terminal, then i put a breakpoint in burgerorderers app.py on the "/" route, more 
specifically right when the initialize_session_cart() function gets called as im also going to monitor the cart variable 
throughout this process. I was pleasantly suprised how well the debugger worked with flask, its just like normal. I start the 
app.py in burgerorderer with the debugger attached and then try to enter the site in the browser. First nothing loads which is 
not a suprise as we have a breakpoint before rendering html and sending it back. However i step into the 
initialize_session_cart() function to see how it works. All it does is put session["cart"] = {"products": [], "total_price": 0} 
all the values we need for now! I press continue to release the program from my breakpoint. On the website i navigate into "menu"
and then "beef" now before adding to cart i put a breakpoint at the /cart/add/<product_id> on the 
add_to_session_cart(product_id) function. When i now try to add a burger it doesnt show in my cart because we have stopped at 
the function, lets step into it and look what happens! First we connect to the database using some functions, i step into the 
first one which takes me into another file, i know i dont want to be here so i step out again and choose to step over these db 
functions as i dont care for them. I could also have put a breakpoint further down and used continue! I then get to a line that 
fetches the cart and then we loop to check if the product we tried to add is in the cart because then we just want to increase 
quantity, as its the first item we append all the information gathered. The session cart now went from the state earlier to 
{'products': [{'product_id': 59, 'name': 'Big Juicy Burger', 'price': Decimal('7.99'), 'product_type': 1, 'quantity': 1, 
'modifications': []}], 'total_price': 0} the modifications are set as empty when appending, this makes sense because we add the 
modifications before placing order, however the total_price is still 0, this is because right after stepping over the appending 
we fall into the calculate_total_price() function, i step into it and se that we loop through the cart calculate based on price 
of product. I step out of the function as i dont want to go through all the logic after ive seen it. Now the item is fully added 
to the cart and the route just redirects us back so it looks like the page never changed on the browser, cart now has 
total_price: 7.99! I set another breakpoint at /order/modify and press continue, after pressing the button on the website we 
stop again before the page is loaded, here a function is called to load all the topping data into our cart, i step into it and 
see that it fetches from the db and loops through and adds modifications to the cart so i step out and step over. Now the 
template loads. Lets check the cart variable, it looks like before but in the modifications array we now have:
{'price_per': '1.30', 'quantity': 1, 'topping_name': 'Potato bread'}, {'price_per': '3.50', 'quantity': 1, 'topping_name': 
'Beef'}, {'price_per': '0.75', 'quantity': 1, 'topping_name': 'Salad'}, {'price_per': '0.30', 'quantity': 1, 'topping_name': 
'Ketchup'}

all relevant toppings!
so i try to set potato bread to 0 and beef to 2 i can see that after updating toppings the quantities in the cart has been 
updated to 0 and 2 respectively. It also calls the calculate total price function again and loops over the toppings aswell and 
adds their individual prices but only if the quantity is above 1 which is per design, it doesnt take off money if u remove 
toppings but it adds money if you add toppings, capitalism... So we now have an updated total which is 11.49. And before i send 
it over to kitchenview i put a breakpoint at the post request and my cart that im sending over looks like the following:

{'products': [{'modifications': [{'price_per': '1.30', 'quantity': 0, 'topping_name': 'Potato bread'}, {'price_per': '3.50', 
'quantity': 2, 'topping_name': 'Beef'}, {'price_per': '0.75', 'quantity': 1, 'topping_name': 'Salad'}, {'price_per': '0.30', 
'quantity': 1, 'topping_name': 'Ketchup'}], 'name': 'Big Juicy Burger', 'price': '7.99', 'product_id': 59, 'product_type': 1, 
'quantity': 1}], 'total_price': 11.49}

nice now it turns it into json and sends it over, in kitchenview we then get the following print after stepping over and 
allowing the request to send

-----------------

Big Juicy Burger
Customer has modified order with: 

0 Potato bread
2 Beef
_________________

I tried going right to cart add route in the browser to see if i can add products that way, but because its a post request its 
not allowed and i would have to fake that request with some sort of plugin or make it with a tool like Postman. I tried to go 
back from modifying and adding another product and modifying the original one again and going in and out but the cart stayed 
intact and didnt break in any way, nothing got duplicated etc. This proves the functions handling the cart are pretty well 
built. And to just add how i monitored the variable it was in the RUN AND DEBUG tab on VScode under Variables under Global 
variables and then under Session variables where the cart resides. When ordering something that isnt a burger i can see that the 
modifications array just remains empty. 

The debug session went well, everything worked better than expected, kudos to flask. The only hard or more annoying thing is 
that if you arent in an active breakpoint or stepping through ie not letting the program run by itself you cant see the 
variables, annoying but doesnt really matter as i just could put a breakpoints where i want, might be a setting in VSCode but if 
thats the case it should be showcased better, could also be that the debugger detaches but im not sure. It was easy to put 
breakpoints and then just release them and continue as i could 
put breakpoints at routes therefore choosing in the browser when i want to go to that route and in turn that breakpoint, when 
monitoring the cart i notice that the one we send over in the end actually is unnessecarily bloated for a simple reason. In 
kitchenview we only print and care fore the toppings that arent the default amount so in this case we only care for the bread 
and beef, the other toppings could be removed from the cart we send over to avoid sending over unnessecary data. Its not however 
as easy as to check if quantity is 1 and remove that toppings because some products has 2 pattys as default, then we might need 
to have another field like default_quantity which we can reference to before sending over and clean up the cart.

I think debugging can and is a very useful tool for me as we just saw i found an optimization i never really thought of before 
stepping through the process step by step!
