Engineering Diary from kipe24. 
Will update when i have meaningful info to contribute to the diary.

3/9: 
Skapade en grupp med fyra gruppmedlemmar. Vi satt oss ner och läste igenom hela uppgiften och började 
diskutera och bolla idéer om hur vi vill göra uppgiften samt vilka tekniker vi vill använda oss av. 
Vi stötte på många nya tekniker som vi inte arbetat med tidigare som vi kommer titta närmare på de kommande veckorna.

4/9:
Hade ett möte med gruppen där vi gick igenom frågor och diskuterade verktygen i mer detalj så att alla har en förståelse vad de används till. 
Vi installerade alla verkygen som behövdes.

5/9:
Satt oss ner och började gå igenom proccessen att arbeta med git i en och samma repo med flera användare samtidigt. 
Vi började med att använda Git cli genom terminalen och sedan avlustade vi med testa runt funktioner inne på Githubs hemsida.
Git clienten var en utmaning då det finns så många olika kommandon att komma ihåg och de blev inte alltid som man hade tänkt sig när man använder dem.
Githubs hemsida är betydligt enklare då den erbjuder en fin UI som gör det lätt att hitta. 
Jag komer personligen arbeta mer mot Git cli genom terminalen för att lära mig arbetssättet bättre.

12/9:
Since the last update i've been delving deeper into Git & Github. 
As a group we've added new branches to our repo and made a plan on how to work on the different branches.
We're going to have a Developement branch that is a copy of our main branch, and a feature branch where we work on new features
that later will be merged back to the Development branch. This will ensure that we isolate new code that we want to work on
and make it easier to see if there will be any merging problems when merging back to our Development branch.
When we're absolutely sure no merging problems will occur we can then merge it into the main branch. Ensuring that the main Branch 
is never broken.

I need to continue working on our groups git-workflow to make pushing new features more consistant and efficient. 
To do this i need to read up on what the different commands in git does in more detail and also continue adding more meaingful content to our github repo.

17/9:
I've been working more on Github and now am starting to understand the different tools and features in a deeper way.
We're been continuously adding to the Github reposition with more text and also started dividing the different menus for us to use in our database later on.
We've decided to use PostgreSQL for our relational database because it gives us more flexibility on how to set up our data. 
We're using DrawSQL to help the team visualise how our database will work and how the different tables will interect with eachother.
We will also use Python as our primary programming language because its a language everyone in the group are used to.
Coupled with the Flask framework for python it will allow us to more easily interact and set up the network connection.

I am going to learn more how Flask works and start tinkering with our website. I will also continue working on understanding and contributing to our datebase via
the DrawSQL site. I will also work more with testing but towards Python since i felt it was pretty hard to understand the Java code in our last lab session. 
I can learn more about testing if i use a programming language i am more comfortable with.

1/10:
Since my last entry we've been working on adding the finishing touches on our project structure inside Github.
We've also made the app.py file to route to our different HTML & CSS files with flask and set it up to connect to our local network. 
Flask is new to everyone in the project and it proved difficult to get started since we had to make a specific file structure for flask to connect the html, css and the python file
together so it can start through the app.py file.

We've also finished the MenuStore database and added it to Github and containerized it with docker. 
I tried setting it up within Docker Desktop first but it proved difficult since i had to make several commands into the terminal which i didnt know enough about so it only
made the image/container and connection wrong. 

I finally figured it out together with the group and we set up a dockerfile inside our project in VScode,
made a requirements.txt file and pulled a postgres image from dockerhub and then made a container with it. 
Now everyone in the group can easily set up the database in their own container and work with it.

Im going to continue working on the burgerorderer website and flesh the menus out further and start to think about how we are going to be implementing the database into our python file.
Next time i'll have to thoroughly read through the commands and watch a longer tutorial to really grasp what commands in docker
im using actually do. That will certainly help out and avoid some annoying debugging in the future.

10/10:
Since the last update our group has worked on finishing up the burgerorder connection to kitchenview, setting up tests and set up our project to generate documentation. 
I've tried to set up the connection from burgerorder to kitchenview which did not work well at first. I couldn't get our items from the shopping-cart to be sent over to kitchenview
because i did lacked understanding of how the Flask library worked. I started researching Flask and eventually worked out how to send over the connection with a place-order function using
a POST request. I then imported JSON and turned the shopping cart from its dictionary format to JSON format and then sent it through to kitchenview. 

I then went through some trial and error to allow me to continue using the cart inside the kitchenview app.py. I asked for help from a teammember and we found the json.loads() method
which allowed us to decode the cart and use it to extract items from the dictionary and print them out to the console in a nice format.
We are very close to being done. Now we only need to polish the kitchenview app.py and burgerorder app.py, dockerize BurgerOrder and Kitchenview and then set up the whole project with
docker compose. When we're done with that we only need to write a summerization & reflection and then we can turn in the project.

DEBUG SESSION 16/10:
Today i am debugging the functionality of the KitchenView function print_order() which has the responsibility of using the order-cart that is sent from BurgerOrderer and prints it out as a formatted string.

I put one breakpoint on row 24 inside of print_order(). I then press the "step over" and go through two print statements that prints "Order has been placed" and some formatting text to the console.
When i come to the for loop which prints the name and all the modifications of the order i press "step into" so i can see every step in the loop. It prints out the name of the order first and then when i continue to
step over the rows of code, it checks if any modifications have been done and prints them out one at a time. 

I choose to add the "addon" variable to my watch-list in the debugger and i can see how the variable changes between each iteration of the loop to a different item in the order-cart each time. 
The "addon" variable is a dictionary with key-value pairs consisting of price, quantity and the name of the topping/addon. It starts out as Sourdough bread, with the price of 1.75$ and the quantity of 1 as
that is what i chose in the menu on the order & modify website. Every time the for-loop iterates it goes through the dictionary of items and modifications and changes each time. When i have read
the information that i need from that particular function and that i see that it does what it is supposed to do, i can press "step out" to get out of the function or loop and continue to another row or function of the program.

If i change the menu-item to something else, the order-cart will have different items in it and the variable "addon" will iterate through another dictionary, resulting in the variable changing to completely new items each time. 
If i cancel half-way through the debugging session ends and the contents of the order is displayed instantly instead of printing them out one by one as they would have if i stepped through them. 

The debugging session as a whole went well and the program did what i expected it to do.
Vscode offers solid debugging features and it was easy to step through each row of code and if i wanted to dig deeper inside a function i could step into it, watch a variable and see how it changed and easily step out of the
function when i got the necessary data i needed to see that the program was running as expected. Debugging a website that is up and running forces you to debug a bit differently than if you would only run the program through your console,
as you sometimes have to press different buttons inside the website to route to different websites which allows you to continue debugging in vscode as the code and the website are connected together.
Debugging through a website likes this was completely new for me and was very helpful for me, as i didn't even know you could debug through a live website in this way before. 
I identified several usecases in the future when building out my next website to test connections and see what happens step-by-step when debugging in this way and i can't wait to try them out in my next project.

The debugging tool is crucial for me to really understand what my code does step by step. If i have a problem with the code and it doesn't do what i expected it to do, 
i start up the debugger and go over the rows that are causing trouble,
row by row. Sometimes adding print statements to fully display variables so i can see what is going on and if i am missing any steps.
Vscode offers so many features that makes it easy to watch variables and see how they change throughout the program,
how the flow of the program changes depending on what logic you put in etc.
I will continue to use the debugger and will always encourage my fellow colleagues to put time to really learn their debugging tool as it can speed up the development process
a lot when you use it correctly. 
